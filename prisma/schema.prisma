// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Stripe customer ID
  stripeCustomerId String? @unique

  // Subscription relationship
  subscription Subscription?

  // Usage tracking
  usage SubscriptionUsage?

  // Resume reviews
  resumeReviews ResumeReview[]

  // Resume suggestions
  resumeSuggestions ResumeSuggestion[]

  // Resume versions
  resumeVersions ResumeVersion[]

  // Chat messages
  chatMessages ChatMessage[]

  // Uploaded files
  uploadedFiles UploadedFile[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe subscription details
  stripeSubscriptionId String @unique
  stripePriceId      String
  stripeProductId    String
  
  // Subscription status
  status            String   // active, canceled, past_due, etc.
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  
  // Plan details
  planName          String   // Freshman, Sophomore, Senior
  planFeatures      String   // Store features as JSON string for SQLite
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("subscriptions")
}

model SubscriptionUsage {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Usage tracking for current period
  resumeReviewsUsed     Int @default(0)
  resumeReviewsLimit    Int
  followUpQuestionsUsed Int @default(0)
  followUpQuestionsLimit Int
  voiceNotesUsed        Int @default(0)
  voiceNotesLimit       Int
  liveMocksUsed         Int @default(0)
  liveMocksLimit        Int
  
  // Reset date for usage tracking
  usageResetDate        DateTime
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("subscription_usage")
}

model ResumeReview {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Resume content hash to identify if resume has changed
  resumeHash  String
  
  // Cached OpenAI response
  comments    String   // JSON string of the comments array
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, resumeHash])
  @@map("resume_reviews")
}

model ResumeVersion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Version details
  versionName String   // e.g., "Original", "After AI Review", "Final"
  resumeContent String // The actual resume content
  
  // File reference
  originalFileId String // Reference to the original uploaded file
  
  // Blob storage details
  blobUrl     String   // URL to the stored file
  fileSize    Int      // Size of the file in bytes
  fileType    String   // MIME type of the file
  
  // Applied suggestions
  appliedSuggestions String? // JSON string of applied suggestions
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("resume_versions")
}

model ChatMessage {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Message details
  role              String   // 'user' or 'assistant'
  content           String   // Encrypted message content
  timestamp         DateTime @default(now())
  
  // Context information
  relatedCommentId  String?  // Optional link to a specific comment
  resumeVersionId   String?  // Optional link to a specific resume version
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("chat_messages")
}

model UploadedFile {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // File details
  filename    String
  originalName String
  fileSize    Int
  fileType    String
  blobUrl     String
  
  // Processing status
  isProcessed Boolean  @default(false)
  processingStatus String? // 'pending', 'processing', 'completed', 'failed'
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("uploaded_files")
}

model ResumeSuggestion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Resume content hash to identify if resume has changed
  resumeHash  String
  
  // Suggestion details
  text        String   // The suggestion text
  why         String   // Why this suggestion was made
  status      String   // 'pending', 'accepted', 'rejected'
  positionStart Int    // Start position in the resume text
  positionEnd   Int    // End position in the resume text
  category    String   // 'grammar', 'content', 'formatting', 'suggestion', 'clarity', 'word-choice'
  referenceText String? // The text that was referenced
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("resume_suggestions")
}
