// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Stripe customer ID
  stripeCustomerId String? @unique

  // Subscription relationship
  subscription Subscription?

  // Usage tracking
  usage SubscriptionUsage?

  // Resume reviews
  resumeReviews ResumeReview[]

  // Resume versions
  resumeVersions ResumeVersion[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe subscription details
  stripeSubscriptionId String @unique
  stripePriceId      String
  stripeProductId    String
  
  // Subscription status
  status            String   // active, canceled, past_due, etc.
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  
  // Plan details
  planName          String   // Freshman, Sophomore, Senior
  planFeatures      String   // Store features as JSON string for SQLite
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("subscriptions")
}

model SubscriptionUsage {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Usage tracking for current period
  resumeReviewsUsed     Int @default(0)
  resumeReviewsLimit    Int
  followUpQuestionsUsed Int @default(0)
  followUpQuestionsLimit Int
  voiceNotesUsed        Int @default(0)
  voiceNotesLimit       Int
  liveMocksUsed         Int @default(0)
  liveMocksLimit        Int
  
  // Reset date for usage tracking
  usageResetDate        DateTime
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("subscription_usage")
}

model ResumeReview {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Resume content hash to identify if resume has changed
  resumeHash  String
  
  // Cached OpenAI response
  comments    String   // JSON string of the comments array
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, resumeHash])
  @@map("resume_reviews")
}

model ResumeVersion {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Version details
  versionName String   // e.g., "Original", "After AI Review", "Final"
  resumeContent String // The actual resume content
  
  // Applied suggestions
  appliedSuggestions String? // JSON string of applied suggestions
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("resume_versions")
}
